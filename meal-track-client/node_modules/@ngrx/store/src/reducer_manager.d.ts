import { OnDestroy, Provider } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { ActionsSubject } from './actions_subject';
import { ActionReducer, ActionReducerFactory, ActionReducerMap, StoreFeature } from './models';
import * as ɵngcc0 from '@angular/core';
export declare abstract class ReducerObservable extends Observable<ActionReducer<any, any>> {
}
export declare abstract class ReducerManagerDispatcher extends ActionsSubject {
}
export declare const UPDATE: "@ngrx/store/update-reducers";
export declare class ReducerManager extends BehaviorSubject<ActionReducer<any, any>> implements OnDestroy {
    private dispatcher;
    private initialState;
    private reducers;
    private reducerFactory;
    constructor(dispatcher: ReducerManagerDispatcher, initialState: any, reducers: ActionReducerMap<any, any>, reducerFactory: ActionReducerFactory<any, any>);
    addFeature(feature: StoreFeature<any, any>): void;
    addFeatures(features: StoreFeature<any, any>[]): void;
    removeFeature(feature: StoreFeature<any, any>): void;
    removeFeatures(features: StoreFeature<any, any>[]): void;
    addReducer(key: string, reducer: ActionReducer<any, any>): void;
    addReducers(reducers: {
        [key: string]: ActionReducer<any, any>;
    }): void;
    removeReducer(featureKey: string): void;
    removeReducers(featureKeys: string[]): void;
    private updateReducers;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ReducerManager>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ReducerManager>;
}
export declare const REDUCER_MANAGER_PROVIDERS: Provider[];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkdWNlcl9tYW5hZ2VyLmQudHMiLCJzb3VyY2VzIjpbInJlZHVjZXJfbWFuYWdlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95LCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBY3Rpb25zU3ViamVjdCB9IGZyb20gJy4vYWN0aW9uc19zdWJqZWN0JztcbmltcG9ydCB7IEFjdGlvblJlZHVjZXIsIEFjdGlvblJlZHVjZXJGYWN0b3J5LCBBY3Rpb25SZWR1Y2VyTWFwLCBTdG9yZUZlYXR1cmUgfSBmcm9tICcuL21vZGVscyc7XG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBSZWR1Y2VyT2JzZXJ2YWJsZSBleHRlbmRzIE9ic2VydmFibGU8QWN0aW9uUmVkdWNlcjxhbnksIGFueT4+IHtcbn1cbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIFJlZHVjZXJNYW5hZ2VyRGlzcGF0Y2hlciBleHRlbmRzIEFjdGlvbnNTdWJqZWN0IHtcbn1cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFVQREFURTogXCJAbmdyeC9zdG9yZS91cGRhdGUtcmVkdWNlcnNcIjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFJlZHVjZXJNYW5hZ2VyIGV4dGVuZHMgQmVoYXZpb3JTdWJqZWN0PEFjdGlvblJlZHVjZXI8YW55LCBhbnk+PiBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBkaXNwYXRjaGVyO1xuICAgIHByaXZhdGUgaW5pdGlhbFN0YXRlO1xuICAgIHByaXZhdGUgcmVkdWNlcnM7XG4gICAgcHJpdmF0ZSByZWR1Y2VyRmFjdG9yeTtcbiAgICBjb25zdHJ1Y3RvcihkaXNwYXRjaGVyOiBSZWR1Y2VyTWFuYWdlckRpc3BhdGNoZXIsIGluaXRpYWxTdGF0ZTogYW55LCByZWR1Y2VyczogQWN0aW9uUmVkdWNlck1hcDxhbnksIGFueT4sIHJlZHVjZXJGYWN0b3J5OiBBY3Rpb25SZWR1Y2VyRmFjdG9yeTxhbnksIGFueT4pO1xuICAgIGFkZEZlYXR1cmUoZmVhdHVyZTogU3RvcmVGZWF0dXJlPGFueSwgYW55Pik6IHZvaWQ7XG4gICAgYWRkRmVhdHVyZXMoZmVhdHVyZXM6IFN0b3JlRmVhdHVyZTxhbnksIGFueT5bXSk6IHZvaWQ7XG4gICAgcmVtb3ZlRmVhdHVyZShmZWF0dXJlOiBTdG9yZUZlYXR1cmU8YW55LCBhbnk+KTogdm9pZDtcbiAgICByZW1vdmVGZWF0dXJlcyhmZWF0dXJlczogU3RvcmVGZWF0dXJlPGFueSwgYW55PltdKTogdm9pZDtcbiAgICBhZGRSZWR1Y2VyKGtleTogc3RyaW5nLCByZWR1Y2VyOiBBY3Rpb25SZWR1Y2VyPGFueSwgYW55Pik6IHZvaWQ7XG4gICAgYWRkUmVkdWNlcnMocmVkdWNlcnM6IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogQWN0aW9uUmVkdWNlcjxhbnksIGFueT47XG4gICAgfSk6IHZvaWQ7XG4gICAgcmVtb3ZlUmVkdWNlcihmZWF0dXJlS2V5OiBzdHJpbmcpOiB2b2lkO1xuICAgIHJlbW92ZVJlZHVjZXJzKGZlYXR1cmVLZXlzOiBzdHJpbmdbXSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSB1cGRhdGVSZWR1Y2VycztcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY29uc3QgUkVEVUNFUl9NQU5BR0VSX1BST1ZJREVSUzogUHJvdmlkZXJbXTtcbiJdfQ==