import { InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
import { SerializationOptions, StoreDevtoolsConfig } from './config';
import { DevtoolsDispatcher } from './devtools-dispatcher';
import { LiftedAction, LiftedState } from './reducer';
import * as ɵngcc0 from '@angular/core';
export declare const ExtensionActionTypes: {
    START: string;
    DISPATCH: string;
    STOP: string;
    ACTION: string;
};
export declare const REDUX_DEVTOOLS_EXTENSION: InjectionToken<ReduxDevtoolsExtension>;
export interface ReduxDevtoolsExtensionConnection {
    subscribe(listener: (change: any) => void): void;
    unsubscribe(): void;
    send(action: any, state: any): void;
    init(state?: any): void;
    error(anyErr: any): void;
}
export interface ReduxDevtoolsExtensionConfig {
    features?: object | boolean;
    name: string | undefined;
    maxAge?: number;
    serialize?: boolean | SerializationOptions;
}
export interface ReduxDevtoolsExtension {
    connect(options: ReduxDevtoolsExtensionConfig): ReduxDevtoolsExtensionConnection;
    send(action: any, state: any, options: ReduxDevtoolsExtensionConfig): void;
}
export declare class DevtoolsExtension {
    private config;
    private dispatcher;
    private devtoolsExtension;
    private extensionConnection;
    liftedActions$: Observable<any>;
    actions$: Observable<any>;
    start$: Observable<any>;
    constructor(devtoolsExtension: ReduxDevtoolsExtension, config: StoreDevtoolsConfig, dispatcher: DevtoolsDispatcher);
    notify(action: LiftedAction, state: LiftedState): void;
    private createChangesObservable;
    private createActionStreams;
    private unwrapAction;
    private getExtensionConfig;
    private sendToReduxDevtools;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DevtoolsExtension>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DevtoolsExtension>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaW9uLmQudHMiLCJzb3VyY2VzIjpbImV4dGVuc2lvbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1Q0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgU2VyaWFsaXphdGlvbk9wdGlvbnMsIFN0b3JlRGV2dG9vbHNDb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBEZXZ0b29sc0Rpc3BhdGNoZXIgfSBmcm9tICcuL2RldnRvb2xzLWRpc3BhdGNoZXInO1xuaW1wb3J0IHsgTGlmdGVkQWN0aW9uLCBMaWZ0ZWRTdGF0ZSB9IGZyb20gJy4vcmVkdWNlcic7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBFeHRlbnNpb25BY3Rpb25UeXBlczoge1xuICAgIFNUQVJUOiBzdHJpbmc7XG4gICAgRElTUEFUQ0g6IHN0cmluZztcbiAgICBTVE9QOiBzdHJpbmc7XG4gICAgQUNUSU9OOiBzdHJpbmc7XG59O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OOiBJbmplY3Rpb25Ub2tlbjxSZWR1eERldnRvb2xzRXh0ZW5zaW9uPjtcbmV4cG9ydCBpbnRlcmZhY2UgUmVkdXhEZXZ0b29sc0V4dGVuc2lvbkNvbm5lY3Rpb24ge1xuICAgIHN1YnNjcmliZShsaXN0ZW5lcjogKGNoYW5nZTogYW55KSA9PiB2b2lkKTogdm9pZDtcbiAgICB1bnN1YnNjcmliZSgpOiB2b2lkO1xuICAgIHNlbmQoYWN0aW9uOiBhbnksIHN0YXRlOiBhbnkpOiB2b2lkO1xuICAgIGluaXQoc3RhdGU/OiBhbnkpOiB2b2lkO1xuICAgIGVycm9yKGFueUVycjogYW55KTogdm9pZDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgUmVkdXhEZXZ0b29sc0V4dGVuc2lvbkNvbmZpZyB7XG4gICAgZmVhdHVyZXM/OiBvYmplY3QgfCBib29sZWFuO1xuICAgIG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBtYXhBZ2U/OiBudW1iZXI7XG4gICAgc2VyaWFsaXplPzogYm9vbGVhbiB8IFNlcmlhbGl6YXRpb25PcHRpb25zO1xufVxuZXhwb3J0IGludGVyZmFjZSBSZWR1eERldnRvb2xzRXh0ZW5zaW9uIHtcbiAgICBjb25uZWN0KG9wdGlvbnM6IFJlZHV4RGV2dG9vbHNFeHRlbnNpb25Db25maWcpOiBSZWR1eERldnRvb2xzRXh0ZW5zaW9uQ29ubmVjdGlvbjtcbiAgICBzZW5kKGFjdGlvbjogYW55LCBzdGF0ZTogYW55LCBvcHRpb25zOiBSZWR1eERldnRvb2xzRXh0ZW5zaW9uQ29uZmlnKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERldnRvb2xzRXh0ZW5zaW9uIHtcbiAgICBwcml2YXRlIGNvbmZpZztcbiAgICBwcml2YXRlIGRpc3BhdGNoZXI7XG4gICAgcHJpdmF0ZSBkZXZ0b29sc0V4dGVuc2lvbjtcbiAgICBwcml2YXRlIGV4dGVuc2lvbkNvbm5lY3Rpb247XG4gICAgbGlmdGVkQWN0aW9ucyQ6IE9ic2VydmFibGU8YW55PjtcbiAgICBhY3Rpb25zJDogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIHN0YXJ0JDogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIGNvbnN0cnVjdG9yKGRldnRvb2xzRXh0ZW5zaW9uOiBSZWR1eERldnRvb2xzRXh0ZW5zaW9uLCBjb25maWc6IFN0b3JlRGV2dG9vbHNDb25maWcsIGRpc3BhdGNoZXI6IERldnRvb2xzRGlzcGF0Y2hlcik7XG4gICAgbm90aWZ5KGFjdGlvbjogTGlmdGVkQWN0aW9uLCBzdGF0ZTogTGlmdGVkU3RhdGUpOiB2b2lkO1xuICAgIHByaXZhdGUgY3JlYXRlQ2hhbmdlc09ic2VydmFibGU7XG4gICAgcHJpdmF0ZSBjcmVhdGVBY3Rpb25TdHJlYW1zO1xuICAgIHByaXZhdGUgdW53cmFwQWN0aW9uO1xuICAgIHByaXZhdGUgZ2V0RXh0ZW5zaW9uQ29uZmlnO1xuICAgIHByaXZhdGUgc2VuZFRvUmVkdXhEZXZ0b29scztcbn1cbiJdfQ==