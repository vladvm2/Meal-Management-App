import { HttpBackend } from '@angular/common/http';
import { Observable } from 'rxjs';
import { LogPosition } from './types/log-position';
import * as ɵngcc0 from '@angular/core';
export declare class NGXMapperService {
    private httpBackend;
    private sourceMapCache;
    private logPositionCache;
    constructor(httpBackend: HttpBackend);
    private static getStackLine;
    private static getPosition;
    private static getTranspileLocation;
    private static getMapFilePath;
    private static getMapping;
    /**
     * does the http get request to get the source map
     * @param sourceMapLocation
     * @param distPosition
     */
    private _getSourceMap;
    /**
     * Returns the LogPosition for the current log
     * If sourceMaps are enabled, it attemps to get the source map from the server, and use that to parse the file name
     * and number of the call
     * @param sourceMapsEnabled
     */
    getCallerDetails(sourceMapsEnabled: boolean): Observable<LogPosition>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NGXMapperService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NGXMapperService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwcGVyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsibWFwcGVyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEJhY2tlbmQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBMb2dQb3NpdGlvbiB9IGZyb20gJy4vdHlwZXMvbG9nLXBvc2l0aW9uJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5HWE1hcHBlclNlcnZpY2Uge1xuICAgIHByaXZhdGUgaHR0cEJhY2tlbmQ7XG4gICAgcHJpdmF0ZSBzb3VyY2VNYXBDYWNoZTtcbiAgICBwcml2YXRlIGxvZ1Bvc2l0aW9uQ2FjaGU7XG4gICAgY29uc3RydWN0b3IoaHR0cEJhY2tlbmQ6IEh0dHBCYWNrZW5kKTtcbiAgICBwcml2YXRlIHN0YXRpYyBnZXRTdGFja0xpbmU7XG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0UG9zaXRpb247XG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0VHJhbnNwaWxlTG9jYXRpb247XG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0TWFwRmlsZVBhdGg7XG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0TWFwcGluZztcbiAgICAvKipcbiAgICAgKiBkb2VzIHRoZSBodHRwIGdldCByZXF1ZXN0IHRvIGdldCB0aGUgc291cmNlIG1hcFxuICAgICAqIEBwYXJhbSBzb3VyY2VNYXBMb2NhdGlvblxuICAgICAqIEBwYXJhbSBkaXN0UG9zaXRpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIF9nZXRTb3VyY2VNYXA7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgTG9nUG9zaXRpb24gZm9yIHRoZSBjdXJyZW50IGxvZ1xuICAgICAqIElmIHNvdXJjZU1hcHMgYXJlIGVuYWJsZWQsIGl0IGF0dGVtcHMgdG8gZ2V0IHRoZSBzb3VyY2UgbWFwIGZyb20gdGhlIHNlcnZlciwgYW5kIHVzZSB0aGF0IHRvIHBhcnNlIHRoZSBmaWxlIG5hbWVcbiAgICAgKiBhbmQgbnVtYmVyIG9mIHRoZSBjYWxsXG4gICAgICogQHBhcmFtIHNvdXJjZU1hcHNFbmFibGVkXG4gICAgICovXG4gICAgZ2V0Q2FsbGVyRGV0YWlscyhzb3VyY2VNYXBzRW5hYmxlZDogYm9vbGVhbik6IE9ic2VydmFibGU8TG9nUG9zaXRpb24+O1xufVxuIl19