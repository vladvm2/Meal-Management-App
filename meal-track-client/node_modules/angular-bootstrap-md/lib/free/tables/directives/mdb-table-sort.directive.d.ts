import { AfterViewInit, ElementRef, EventEmitter, OnInit, Renderer2 } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
declare enum SortDirection {
    ASC = "ascending",
    DESC = "descending",
    CONST = "constant"
}
export interface SortedData {
    data: any[];
    sortOrder: string;
    sortBy: string;
}
export declare class MdbTableSortDirective implements OnInit, AfterViewInit {
    private el;
    private renderer;
    data: any[];
    sortedInto: boolean;
    order: SortDirection.ASC | SortDirection.DESC | SortDirection.CONST;
    dataSource: Array<any>;
    sortBy: string;
    sortIcon: boolean;
    resetSortDirection: boolean;
    sortEnd: EventEmitter<any[]>;
    sorted: EventEmitter<SortedData>;
    constructor(el: ElementRef, renderer: Renderer2);
    onclick(): void;
    trimWhiteSigns(headElement: any): string;
    moveArrayItem(arr: any, oldIndex: number, newIndex: number): any;
    sortDataBy(key: string | any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    createIcon(): void;
    removeSort(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MdbTableSortDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MdbTableSortDirective, "[mdbTableSort]", never, {
    "dataSource": "mdbTableSort";
    "sortIcon": "sortIcon";
    "resetSortDirection": "resetSortDirection";
    "sortBy": "sortBy";
}, {
    "sortEnd": "sortEnd";
    "sorted": "sorted";
}, never>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRiLXRhYmxlLXNvcnQuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbIm1kYi10YWJsZS1zb3J0LmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQStCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25Jbml0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmRlY2xhcmUgZW51bSBTb3J0RGlyZWN0aW9uIHtcbiAgICBBU0MgPSBcImFzY2VuZGluZ1wiLFxuICAgIERFU0MgPSBcImRlc2NlbmRpbmdcIixcbiAgICBDT05TVCA9IFwiY29uc3RhbnRcIlxufVxuZXhwb3J0IGludGVyZmFjZSBTb3J0ZWREYXRhIHtcbiAgICBkYXRhOiBhbnlbXTtcbiAgICBzb3J0T3JkZXI6IHN0cmluZztcbiAgICBzb3J0Qnk6IHN0cmluZztcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1kYlRhYmxlU29ydERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJpdmF0ZSBlbDtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIGRhdGE6IGFueVtdO1xuICAgIHNvcnRlZEludG86IGJvb2xlYW47XG4gICAgb3JkZXI6IFNvcnREaXJlY3Rpb24uQVNDIHwgU29ydERpcmVjdGlvbi5ERVNDIHwgU29ydERpcmVjdGlvbi5DT05TVDtcbiAgICBkYXRhU291cmNlOiBBcnJheTxhbnk+O1xuICAgIHNvcnRCeTogc3RyaW5nO1xuICAgIHNvcnRJY29uOiBib29sZWFuO1xuICAgIHJlc2V0U29ydERpcmVjdGlvbjogYm9vbGVhbjtcbiAgICBzb3J0RW5kOiBFdmVudEVtaXR0ZXI8YW55W10+O1xuICAgIHNvcnRlZDogRXZlbnRFbWl0dGVyPFNvcnRlZERhdGE+O1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyKTtcbiAgICBvbmNsaWNrKCk6IHZvaWQ7XG4gICAgdHJpbVdoaXRlU2lnbnMoaGVhZEVsZW1lbnQ6IGFueSk6IHN0cmluZztcbiAgICBtb3ZlQXJyYXlJdGVtKGFycjogYW55LCBvbGRJbmRleDogbnVtYmVyLCBuZXdJbmRleDogbnVtYmVyKTogYW55O1xuICAgIHNvcnREYXRhQnkoa2V5OiBzdHJpbmcgfCBhbnkpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgY3JlYXRlSWNvbigpOiB2b2lkO1xuICAgIHJlbW92ZVNvcnQoKTogdm9pZDtcbn1cbmV4cG9ydCB7fTtcbiJdfQ==